# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-03-02 10:20
from __future__ import unicode_literals
import json
import os.path as op

from dateutil.parser import parse as parse_
from django.conf import settings
from django.contrib.auth.models import User
from django.core.management import call_command
from django.db import migrations
from django.utils.dateparse import parse_datetime
from django.utils.timezone import is_aware, make_aware
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from actions.models import Surgery
from subjects.models import Species, Subject, Line


DATA_DIR = op.abspath(op.join(__file__, '../../../../data'))


# Functions
# ------------------------------------------------------------------------------------------------

def parse(date_str):
    if not date_str:
        return
    ret = parse_(date_str)
    if not is_aware(ret):
        ret = make_aware(ret)
    return ret


def get_table(doc_name, sheet_name):
    scope = ['https://spreadsheets.google.com/feeds']
    path = op.join(DATA_DIR, 'gdrive.json')
    credentials = ServiceAccountCredentials.from_json_keyfile_name(path, scope)
    gc = gspread.authorize(credentials)
    wks = gc.open(doc_name).worksheet(sheet_name)
    rows = wks.get_all_values()
    table = []
    headers = rows[0]
    for row in rows[2:]:
        l = {headers[i]: row[i].strip() for i in range(len(headers))}
        table.append(l)
    return table


def get_user(initials):
    nickname = {
        'AL': 'armin',
        'AP': 'andy',
        'CR': 'charu',
        'NS': 'nick',
        'ICL': 'i-chun',
        'PZH': 'peter',
        'MDia': 'mika',
        'MK': 'michael',
        'SF': 'sam',
        'MP': 'marius',
        'PC': 'pip',
        'MW': 'miles',
        'LF': 'laura',
    }[initials]
    return User.objects.get(username=nickname)


def get_line(sheet_name, table_line=None):
    name = {row['Sheet Name']: row['NAME'] for row in table_line}[sheet_name]
    return Line.objects.get(name=name)


def get_subject(nickname):
    if not nickname:
        return
    return Subject.objects.get(nickname=nickname)


def get_line_kwargs(row):
    return dict(
        name=row['NAME'],
        auto_name=row['NICKNAME'],
        target_phenotype=row['LONG NAME'],
        description=row['BLURB'],
        json=json.dumps(json.loads('''
            {"stock_no": "%s",
             "source": "%s",
             "genotype": "%s",
             "bru_strain_number": "%s",
             "atlas": "%s"}
        ''' % (row['STOCK NO'],
               row['SOURCE'],
               row['GENOTYPE'],
               row['BRU STRAIN NUMBER'],
               row['ATLAS'],
              )))
    )


def get_subjects_kwargs(row, mouse=None, table_line=None):
    sc = Subject.SEVERITY_CHOICES
    # Lookup severity.
    severity = {v: k for (k, v) in dict(sc).items()}.get(row['Actual Severity'], None)
    return dict(
         nickname=row['Nickname'],
         birth_date=parse(row['Date of Birth']) if row['Date of Birth'] else None,
         adverse_effects=row['Adverse Effects'],
         death_date=parse(row['Cull Date']) if row['Cull Date'] else None,
         cull_method=row['Cull Method'],
         actual_severity=severity,
         protocol_number=row['Protocol #'],
         responsible_user=get_user(row['Responsible User']),
         species=mouse,
         line=get_line(row['Line'], table_line=table_line),
     )


def get_surgery_kwargs(row):
    return dict(
        users=[get_user(initials.strip()) for initials in row['Surgery Performed By'].split(',')],
        subject=get_subject(row['Nickname']),
        start_time=parse(row['Date of surgery']),
        outcome_type=row['Acute/ Recovery'][0],
        narrative=row['Procedures'],
    )


# Migrations
# ------------------------------------------------------------------------------------------------

def load_static(apps, schema_editor):
    path = op.join(DATA_DIR, 'dumped_static.json')
    call_command('loaddata', path)


def make_admin(apps, schema_editor):
    for username in ('Experiment', 'charu', 'cyrille', 'nick'):
        u = User.objects.get(username=username)
        u.is_superuser = True
        u.save()


def load_worksheets(apps, schema_editor):
    mouse = Species.objects.get(display_name='Laboratory mouse')
    table_subjects = get_table('Mice Procedure Log', 'PROCEDURE LOG')
    table_line = get_table('Mice Stock - C57 and Transgenic', 'Current lines in the unit')

    # Add lines.
    Line.objects.bulk_create(Line(**get_line_kwargs(row)) for row in table_line)
    print("%d lines added." % len(table_line))

    # Add subjects.
    Subject.objects.bulk_create(Subject(**get_subjects_kwargs(row,
                                                              mouse=mouse,
                                                              table_line=table_line,
                                                              ))
                                for row in table_subjects
                                if row['Nickname'])
    print("%d subjects added." % len(table_subjects))

    # Add surgeries.
    Surgery.objects.bulk_create(Surgery(**get_surgery_kwargs(row))
                                for row in table_subjects
                                if row['Nickname'])
    print("%d surgeries added." % len(table_subjects))


class Migration(migrations.Migration):

    dependencies = [
        ('subjects', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('actions', '__latest__'),
        ('contenttypes', '__latest__'),
    ]

    operations = [
        migrations.RunPython(load_static),
        migrations.RunPython(make_admin),
        migrations.RunPython(load_worksheets),
    ]

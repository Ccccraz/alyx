# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-03-09 15:17
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('misc', '__first__'),
        ('equipment', '__first__'),
        ('subjects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('narrative', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, help_text='The physical location at which the action was performed', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.LabLocation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('narrative', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, help_text='The physical location at which the action was performed', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.LabLocation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcedureType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('name', models.CharField(help_text='Short procedure name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the procedure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Surgery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('narrative', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('outcome_type', models.CharField(blank=True, choices=[('a', 'Acute'), ('r', 'Recovery')], max_length=1)),
                ('brain_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='misc.BrainLocation')),
                ('location', models.ForeignKey(blank=True, help_text='The physical location at which the action was performed', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.LabLocation')),
                ('procedures', models.ManyToManyField(blank=True, help_text='The procedure(s) performed', to='actions.ProcedureType')),
                ('subject', models.ForeignKey(help_text='The subject on which this action was performed', on_delete=django.db.models.deletion.CASCADE, related_name='actions_surgerys', to='subjects.Subject')),
                ('users', models.ManyToManyField(blank=True, help_text='The user(s) involved in this action', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'surgeries',
            },
        ),
        migrations.CreateModel(
            name='VirusInjection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('narrative', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('injection_volume', models.FloatField(blank=True, help_text='Volume in nanoliters', null=True)),
                ('rate_of_injection', models.FloatField(blank=True, help_text='TODO: Nanoliters per second / per minute?', null=True)),
                ('injection_type', models.CharField(blank=True, choices=[('I', 'Iontophoresis'), ('P', 'Pressure')], default='I', help_text='Whether the injection was through iontophoresis or pressure', max_length=1)),
                ('location', models.ForeignKey(blank=True, help_text='The physical location at which the action was performed', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.LabLocation')),
                ('procedures', models.ManyToManyField(blank=True, help_text='The procedure(s) performed', to='actions.ProcedureType')),
                ('subject', models.ForeignKey(help_text='The subject on which this action was performed', on_delete=django.db.models.deletion.CASCADE, related_name='actions_virusinjections', to='subjects.Subject')),
                ('users', models.ManyToManyField(blank=True, help_text='The user(s) involved in this action', to=settings.AUTH_USER_MODEL)),
                ('virus_batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.VirusBatch')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterAdministration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('date_time', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('water_administered', models.FloatField(help_text='Water administered, in millilitres')),
                ('hydrogel', models.NullBooleanField()),
                ('subject', models.ForeignKey(help_text='The subject to which water was administered', on_delete=django.db.models.deletion.CASCADE, related_name='water_administrations', to='subjects.Subject')),
                ('user', models.ForeignKey(blank=True, help_text='The user who administered water', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterRestriction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('narrative', models.TextField(blank=True)),
                ('start_time', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, help_text='The physical location at which the action was performed', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.LabLocation')),
                ('procedures', models.ManyToManyField(blank=True, help_text='The procedure(s) performed', to='actions.ProcedureType')),
                ('subject', models.ForeignKey(help_text='The subject on which this action was performed', on_delete=django.db.models.deletion.CASCADE, related_name='actions_waterrestrictions', to='subjects.Subject')),
                ('users', models.ManyToManyField(blank=True, help_text='The user(s) involved in this action', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Weighing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('date_time', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('weight', models.FloatField(help_text='Weight in grams')),
                ('subject', models.ForeignKey(help_text='The subject which was weighed', on_delete=django.db.models.deletion.CASCADE, related_name='weighings', to='subjects.Subject')),
                ('user', models.ForeignKey(blank=True, help_text='The user who weighed the subject', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('weighing_scale', models.ForeignKey(blank=True, help_text='The scale record that was used to weigh the subject', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.WeighingScale')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='otheraction',
            name='procedures',
            field=models.ManyToManyField(blank=True, help_text='The procedure(s) performed', to='actions.ProcedureType'),
        ),
        migrations.AddField(
            model_name='otheraction',
            name='subject',
            field=models.ForeignKey(help_text='The subject on which this action was performed', on_delete=django.db.models.deletion.CASCADE, related_name='actions_otheractions', to='subjects.Subject'),
        ),
        migrations.AddField(
            model_name='otheraction',
            name='users',
            field=models.ManyToManyField(blank=True, help_text='The user(s) involved in this action', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='session',
            name='procedures',
            field=models.ManyToManyField(blank=True, help_text='The procedure(s) performed', to='actions.ProcedureType'),
        ),
        migrations.AddField(
            model_name='session',
            name='subject',
            field=models.ForeignKey(help_text='The subject on which this action was performed', on_delete=django.db.models.deletion.CASCADE, related_name='actions_sessions', to='subjects.Subject'),
        ),
        migrations.AddField(
            model_name='session',
            name='users',
            field=models.ManyToManyField(blank=True, help_text='The user(s) involved in this action', to=settings.AUTH_USER_MODEL),
        ),
    ]

# Generated by Django 2.0.6 on 2018-07-09 16:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data', '0002_auto_20180709_1644'),
        ('imaging', '0001_initial'),
        ('equipment', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('actions', '0002_auto_20180709_1644'),
        ('misc', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='widefieldimaging',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_widefieldimaging_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='widefieldimaging',
            name='excitation_device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment.LightSource'),
        ),
        migrations.AddField(
            model_name='widefieldimaging',
            name='image_position',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='misc.CoordinateTransformation'),
        ),
        migrations.AddField(
            model_name='widefieldimaging',
            name='provenance_directory',
            field=models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_widefieldimaging_provenance_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='widefieldimaging',
            name='raw_data',
            field=models.ForeignKey(blank=True, help_text='pointer to nT by nX by nY by nC (colors) binary file', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='widefield_raw', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='widefieldimaging',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_widefieldimaging_session_related', to='actions.Session'),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='compressed_data',
            field=models.ForeignKey(blank=True, help_text='to Compressed_movie, if compression was run', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='two_photon_compressed', to='imaging.SVDCompressedMovie'),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_twophotonimaging_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='image_position',
            field=models.ForeignKey(blank=True, help_text='Note if different planes have different alignment (e.g. flyback plane), this canâ€™t be done in a single 3x3 transformation matrix, instead you would have an array of 3x2 matrices. TODO: how do we deal with this?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='misc.CoordinateTransformation'),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='provenance_directory',
            field=models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_twophotonimaging_provenance_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='raw_data',
            field=models.ForeignKey(blank=True, help_text='array of size nT by nX by nY by nZ by nC', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='two_photon_raw', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='reference_stack',
            field=models.ForeignKey(blank=True, help_text='TODO: reference stack / BrainImage', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='two_photon_reference', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='twophotonimaging',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_twophotonimaging_session_related', to='actions.Session'),
        ),
        migrations.AddField(
            model_name='svdcompressedmovie',
            name='compressed_data_U',
            field=models.ForeignKey(blank=True, help_text='nSVs*nY*nX binary array giving normalized eigenframesSVD-compression eigenframes', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='svd_movie_u', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='svdcompressedmovie',
            name='compressed_data_V',
            field=models.ForeignKey(blank=True, help_text='nSamples*nSVs binary array SVD-compression timecourses', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='svd_movie_v', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='svdcompressedmovie',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_svdcompressedmovie_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='svdcompressedmovie',
            name='provenance_directory',
            field=models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_svdcompressedmovie_provenance_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='svdcompressedmovie',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_svdcompressedmovie_session_related', to='actions.Session'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roidetection_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='f',
            field=models.ForeignKey(blank=True, help_text='array of size nT by nROIs giving raw fluorescence', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roi_detection_f', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='f0',
            field=models.ForeignKey(blank=True, help_text='array of size nT by nROIs giving resting fluorescence', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roi_detection_f0', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='masks',
            field=models.ForeignKey(blank=True, help_text='array of size nROIs by nY by nX', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='roi_detection_masks', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='plane',
            field=models.ForeignKey(blank=True, help_text='array saying which plane each roi is found in. TODO: is this an ArrayField? JSON?', null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='provenance_directory',
            field=models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roidetection_provenance_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roidetection_session_related', to='actions.Session'),
        ),
        migrations.AddField(
            model_name='roidetection',
            name='two_photon_imaging_id',
            field=models.ForeignKey(blank=True, help_text='2P imaging stack.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='imaging.TwoPhotonImaging'),
        ),
        migrations.AddField(
            model_name='roi',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roi_created_by_related', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='roi',
            name='provenance_directory',
            field=models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roi_provenance_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='roi',
            name='roi_detection_id',
            field=models.ForeignKey(blank=True, help_text='link to detection entry', null=True, on_delete=django.db.models.deletion.SET_NULL, to='imaging.ROIDetection'),
        ),
        migrations.AddField(
            model_name='roi',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roi_session_related', to='actions.Session'),
        ),
    ]

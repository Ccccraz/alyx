# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-09-14 19:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('misc', '0001_initial'),
        ('equipment', '0001_initial'),
        ('actions', '0001_initial'),
        ('data', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ROI',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('roi_type', models.CharField(blank=True, help_text='soma, dendrite, neuropil, …> TODO: normalize?', max_length=255, null=True)),
                ('optogenetic_response', models.CharField(blank=True, help_text='e.g. “Short latency” (only if applicable)', max_length=255, null=True)),
                ('putative_cell_type', models.CharField(blank=True, help_text='e.g. “Sst interneuron”, “PT cell”', max_length=255, null=True)),
                ('estimated_layer', models.CharField(blank=True, help_text='e.g. “Layer 5b”', max_length=255, null=True)),
                ('experiment', models.ForeignKey(help_text='The Experiment to which this data belongs', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roi_related', to='actions.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ROIDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('plane', models.IntegerField(blank=True, help_text='array saying which plane each roi is found in. TODO: is this an ArrayField? JSON?', null=True)),
                ('generating_software', models.CharField(blank=True, help_text='e.g. “AutoROI 0.8.3”', max_length=255, null=True)),
                ('preprocessing', models.CharField(blank=True, help_text='computed (F-F0) / F0, estimating F0 as running min”', max_length=255, null=True)),
                ('experiment', models.ForeignKey(help_text='The Experiment to which this data belongs', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_roidetection_related', to='actions.Experiment')),
                ('f', models.ForeignKey(blank=True, help_text='array of size nT by nROIs giving raw fluorescence', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roi_detection_f', to='data.Dataset')),
                ('f0', models.ForeignKey(blank=True, help_text='array of size nT by nROIs giving resting fluorescence', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roi_detection_f0', to='data.Dataset')),
                ('masks', models.ForeignKey(blank=True, help_text='array of size nROIs by nX by nY', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roi_detection_masks', to='data.Dataset')),
                ('provenance_directory', models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roi_detection_provenance', to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SVDCompressedMovie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('compressed_data_U', models.ForeignKey(blank=True, help_text='binary array containing SVD-compression eigenframes', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='svd_movie_u', to='data.Dataset')),
                ('compressed_data_V', models.ForeignKey(blank=True, help_text='binary array containing SVD-compression timecourses', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='svd_movie_v', to='data.Dataset')),
                ('experiment', models.ForeignKey(help_text='The Experiment to which this data belongs', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_svdcompressedmovie_related', to='actions.Experiment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwoPhotonImaging',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.FloatField(blank=True, help_text='in seconds relative to experiment start. TODO: not DateTimeField? / TimeDifference', null=True)),
                ('end_time', models.FloatField(blank=True, help_text='Equals start time if single application. TODO: should this be an offset? Or DateTimeField? Or TimeDifference?', null=True)),
                ('imaging_indicator', models.CharField(blank=True, help_text='<GCaMP6f, GCaMP6m, GCaMP6s …>. TODO: normalize!', max_length=255, null=True)),
                ('description', models.CharField(blank=True, help_text='e.g. “V1 layers 2-4”', max_length=255, null=True)),
                ('excitation_wavelength', models.FloatField(blank=True, help_text='in nm', null=True)),
                ('recording_wavelength', models.FloatField(blank=True, help_text='in nm. Can be array for multispectral imaging. TODO: deal with arrays?', null=True)),
                ('compressed_data', models.ForeignKey(blank=True, help_text='to Compressed_movie, if compression was run', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='two_photon_compressed', to='data.Dataset')),
                ('experiment', models.ForeignKey(help_text='The Experiment to which this data belongs', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_twophotonimaging_related', to='actions.Experiment')),
                ('image_position', models.ForeignKey(blank=True, help_text='Note if different planes have different alignment (e.g. flyback plane), this can’t be done in a single 3x3 transformation matrix, instead you would have an array of 3x2 matrices. TODO: how do we deal with this?', null=True, on_delete=django.db.models.deletion.CASCADE, to='misc.CoordinateTransformation')),
                ('raw_data', models.ForeignKey(blank=True, help_text='array of size nT by nX by nY by nZ by nC', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='two_photon_raw', to='data.Dataset')),
                ('reference_stack', models.ForeignKey(blank=True, help_text='TODO: reference stack / BrainImage', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='two_photon_reference', to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WidefieldImaging',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.FloatField(blank=True, help_text='in seconds relative to experiment start. TODO: not DateTimeField? / TimeDifference', null=True)),
                ('end_time', models.FloatField(blank=True, help_text='Equals start time if single application. TODO: should this be an offset? Or DateTimeField? Or TimeDifference?', null=True)),
                ('imaging_indicator', models.CharField(blank=True, help_text='<GCaMP6f, GCaMP6m, GCaMP6s, VSFPb1.2, intrinsic, …>. TODO: normalize!', max_length=255, null=True)),
                ('preprocessing', models.CharField(blank=True, help_text='e.g. “computed (F-F0) / F0, estimating F0 as running min”', max_length=255, null=True)),
                ('description', models.CharField(blank=True, help_text='e.g. “field of view includes V1, S1, retrosplenial”', max_length=255, null=True)),
                ('excitation_nominal_wavelength', models.FloatField(blank=True, help_text='in nm. Can be array for multispectral', null=True)),
                ('recording_nominal_wavelength', models.FloatField(blank=True, help_text='in nm. Can be array for multispectral', null=True)),
                ('recording_device', models.CharField(blank=True, help_text='e.g. camera manufacturer, plus filter description etc. TODO: Appliance subclass - what name?', max_length=255, null=True)),
                ('compressed_data', models.ForeignKey(blank=True, help_text='Link to SVD compressed movie, if compression was run', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widefield_compressed', to='imaging.SVDCompressedMovie')),
                ('excitation_device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.LightSource')),
                ('experiment', models.ForeignKey(help_text='The Experiment to which this data belongs', on_delete=django.db.models.deletion.CASCADE, related_name='imaging_widefieldimaging_related', to='actions.Experiment')),
                ('image_position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='misc.CoordinateTransformation')),
                ('raw_data', models.ForeignKey(blank=True, help_text='pointer to nT by nX by nY by nC (colors) binary file', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='widefield_raw', to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='roidetection',
            name='two_photon_imaging_id',
            field=models.ForeignKey(blank=True, help_text='2P imaging stack.', null=True, on_delete=django.db.models.deletion.CASCADE, to='imaging.TwoPhotonImaging'),
        ),
        migrations.AddField(
            model_name='roi',
            name='roi_detection_id',
            field=models.ForeignKey(blank=True, help_text='link to detection entry', null=True, on_delete=django.db.models.deletion.CASCADE, to='imaging.ROIDetection'),
        ),
    ]

# Generated by Django 2.0.6 on 2018-07-09 16:44

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ROI',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('roi_type', models.CharField(blank=True, help_text='soma, dendrite, neuropil, …> TODO: normalize?', max_length=255)),
                ('optogenetic_response', models.CharField(blank=True, help_text="e.g. 'Short latency' (only if applicable)", max_length=255)),
                ('putative_cell_type', models.CharField(blank=True, help_text="e.g. 'Sst interneuron', 'PT cell'", max_length=255)),
                ('estimated_layer', models.CharField(blank=True, help_text="e.g. 'Layer 5b'", max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ROIDetection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('preprocessing', models.CharField(blank=True, help_text="computed (F-F0) / F0, estimating F0 as running min'", max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SVDCompressedMovie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TwoPhotonImaging',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('description', models.CharField(blank=True, help_text="e.g. 'V1 layers 2-4'", max_length=255)),
                ('excitation_wavelength', models.FloatField(blank=True, help_text='in nm', null=True)),
                ('recording_wavelength', models.FloatField(blank=True, help_text='in nm. Can be array for multispectral imaging. TODO: deal with arrays?', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WidefieldImaging',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('nominal_start_time', models.DateTimeField(blank=True, help_text='in seconds relative to session start. TODO: not DateTimeField? / TimeDifference', null=True)),
                ('nominal_end_time', models.DateTimeField(blank=True, help_text='Equals start time if single application. TODO: should this be an offset? Or DateTimeField? Or TimeDifference?', null=True)),
                ('imaging_indicator', models.CharField(blank=True, help_text='<GCaMP6f, GCaMP6m, GCaMP6s, VSFPb1.2, intrinsic, …>. TODO: normalize!', max_length=255)),
                ('preprocessing', models.CharField(blank=True, help_text="e.g. 'computed (F-F0) / F0, estimating F0 as running min'", max_length=255)),
                ('description', models.CharField(blank=True, help_text="e.g. 'field of view includes V1, S1, retrosplenial'", max_length=255)),
                ('excitation_nominal_wavelength', models.FloatField(blank=True, help_text='in nm. Can be array for multispectral', null=True)),
                ('recording_nominal_wavelength', models.FloatField(blank=True, help_text='in nm. Can be array for multispectral', null=True)),
                ('recording_device', models.CharField(blank=True, help_text='e.g. camera manufacturer, plus filter description etc. TODO: Appliance subclass - what name?', max_length=255)),
                ('compressed_data', models.ForeignKey(blank=True, help_text='Link to SVD compressed movie, if compression was run', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='widefield_compressed', to='imaging.SVDCompressedMovie')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

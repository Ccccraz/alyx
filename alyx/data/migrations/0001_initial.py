# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-04-26 11:46
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('actions', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataRepository',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'data repositories',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('filename', models.CharField(help_text='Full filename or UNC filepath', max_length=1000)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhysicalArchive',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('location', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('column_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, null=True, size=None)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Time series',
            },
        ),
        migrations.CreateModel(
            name='ArchiveDataRepository',
            fields=[
                ('datarepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.DataRepository')),
                ('identifier', models.CharField(blank=True, max_length=255)),
                ('tape_contents', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Tape contents, including untracked files.', null=True)),
                ('physical_archive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data.PhysicalArchive')),
            ],
            options={
                'verbose_name_plural': 'archive data repositories',
            },
            bases=('data.datarepository',),
        ),
        migrations.CreateModel(
            name='LocalDataRepository',
            fields=[
                ('datarepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.DataRepository')),
                ('hostname', models.CharField(blank=True, help_text="Hostname must be unique. e.g. 'NSLaptop'", max_length=1000)),
                ('path', models.CharField(blank=True, help_text="e.g. 'D:/Data/acquisition/'", max_length=1000)),
            ],
            options={
                'verbose_name_plural': 'local data repositories',
            },
            bases=('data.datarepository',),
        ),
        migrations.CreateModel(
            name='NetworkDataRepository',
            fields=[
                ('datarepository_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.DataRepository')),
                ('fqdn', models.CharField(blank=True, help_text='Fully Qualified Domain Name or IP, e.g. 1.2.3.4 or foxtrot.neuro.ucl.ac.uk', max_length=1000)),
                ('share', models.CharField(blank=True, help_text="Share name, e.g. 'Data'", max_length=1000)),
                ('path', models.CharField(blank=True, help_text="Path name after share, e.g. '/subjects/'", max_length=1000)),
                ('nfs_supported', models.BooleanField(help_text='NFS supported (Linux)')),
                ('smb_supported', models.BooleanField(help_text='SMB supported (Windows)')),
                ('afp_supported', models.BooleanField(help_text='AFP supported (Linux)')),
            ],
            options={
                'verbose_name_plural': 'network data repositories',
            },
            bases=('data.datarepository',),
        ),
        migrations.CreateModel(
            name='Timestamp',
            fields=[
                ('dataset_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.Dataset')),
                ('timebase_name', models.CharField(blank=True, max_length=255)),
                ('regularly_sampled', models.NullBooleanField()),
                ('sample_rate', models.FloatField(blank=True, null=True)),
                ('first_sample_time', models.FloatField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('data.dataset',),
        ),
        migrations.AddField(
            model_name='timeseries',
            name='file',
            field=models.ForeignKey(help_text='txn array where t is number of timepoints and n is number of traces', on_delete=django.db.models.deletion.CASCADE, to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='timeseries',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='actions.Session'),
        ),
        migrations.AddField(
            model_name='filerecord',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_records', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='datarepository',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_data.datarepository_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='timeseries',
            name='timestamps',
            field=models.ManyToManyField(blank=True, related_name='timeseries', to='data.Timestamp'),
        ),
    ]

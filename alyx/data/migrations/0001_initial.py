# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-19 08:09
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('actions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataRepository',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('name', models.CharField(max_length=255)),
                ('path', models.CharField(blank=True, help_text='absolute path to the repository', max_length=1000)),
            ],
            options={
                'verbose_name_plural': 'data repositories',
            },
        ),
        migrations.CreateModel(
            name='DataRepositoryType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('md5', models.UUIDField(blank=True, help_text='MD5 hash of the data buffer', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_dataset_created_by_related', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('name', models.CharField(blank=True, help_text='description of data type', max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('description', models.TextField(blank=True, help_text="misc. narrative e.g. 'drifting gratings of different orientations', 'ChoiceWorld behavior events'")),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_eventseries_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('event_times', models.ForeignKey(blank=True, help_text='n*1 array of times', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_eventseries_event_times_related', to='data.Dataset')),
                ('event_types', models.ForeignKey(blank=True, help_text='n*1 array listing the type of each event, numbers or strings', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_eventseries_event_types_related', to='data.Dataset')),
                ('provenance_directory', models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_eventseries_provenance_related', to='data.Dataset')),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_eventseries_session_related', to='actions.Session')),
            ],
            options={
                'verbose_name_plural': 'Event series',
            },
        ),
        migrations.CreateModel(
            name='FileRecord',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('relative_path', models.CharField(blank=True, help_text='path name within repository', max_length=1000)),
                ('data_repository', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.DataRepository')),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_filerecord_dataset_related', to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IntervalSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('description', models.TextField(blank=True, help_text="misc. narrative e.g. 'drifting gratings of different orientations', 'ChoiceWorld behavior intervals'")),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_intervalseries_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('interval_times', models.ForeignKey(blank=True, help_text='n*2 array of start and end times', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_intervalseries_interval_times_related', to='data.Dataset')),
                ('interval_types', models.ForeignKey(blank=True, help_text='n*1 array listing the type of each interval', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_intervalseries_interval_types_related', to='data.Dataset')),
                ('provenance_directory', models.ForeignKey(blank=True, help_text='link to directory containing  intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_intervalseries_provenance_related', to='data.Dataset')),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_intervalseries_session_related', to='actions.Session')),
            ],
            options={
                'verbose_name_plural': 'Interval series',
            },
        ),
        migrations.CreateModel(
            name='Timescale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('name', models.CharField(blank=True, help_text='informal name describing this field', max_length=255)),
                ('nominal_start', models.DateTimeField(blank=True, help_text='Approximate date and time corresponding to 0 samples', null=True)),
                ('nominal_time_unit', models.FloatField(blank=True, help_text='Nominal time unit for this timescale (in seconds)', null=True)),
                ('final', models.BooleanField(help_text='set to true for the final results of time alignment, in seconds')),
                ('info', models.CharField(blank=True, help_text='any information, e.g. length of break around 300s inferred approximately from computer clock', max_length=255)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_timescale_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_timescale_session_related', to='actions.Session')),
            ],
            options={
                'verbose_name_plural': 'Time scales',
            },
        ),
        migrations.CreateModel(
            name='TimeSeries',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_timeseries_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('data', models.ForeignKey(blank=True, help_text='N*2 array containing sample numbers and their associated timestamps', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_timeseries_data_related', to='data.Dataset')),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_timeseries_session_related', to='actions.Session')),
                ('timescale', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.Timescale')),
                ('timestamps', models.ForeignKey(blank=True, help_text='N*2 array containing sample numbers and their associated timestamps', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_timeseries_timestamps_related', to='data.Dataset')),
            ],
            options={
                'verbose_name_plural': 'Time series',
            },
        ),
        migrations.AddField(
            model_name='intervalseries',
            name='timescale',
            field=models.ForeignKey(blank=True, help_text='which timescale this is on', null=True, on_delete=django.db.models.deletion.CASCADE, to='data.Timescale'),
        ),
        migrations.AddField(
            model_name='intervalseries',
            name='type_descriptions',
            field=models.ForeignKey(blank=True, help_text='interval series type descriptions', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_intervalseries_type_descriptions_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='eventseries',
            name='timescale',
            field=models.ForeignKey(blank=True, help_text='which timescale this is on', null=True, on_delete=django.db.models.deletion.CASCADE, to='data.Timescale'),
        ),
        migrations.AddField(
            model_name='eventseries',
            name='type_descriptions',
            field=models.ForeignKey(blank=True, help_text='nTypes*2 text array (.tsv) describing event types', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_eventseries_type_descriptions_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='dataset_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.DatasetType'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='session',
            field=models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_dataset_session_related', to='actions.Session'),
        ),
        migrations.AddField(
            model_name='datarepository',
            name='repository_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='data.DataRepositoryType'),
        ),
    ]

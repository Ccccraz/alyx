# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-08-08 14:04
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('equipment', '0002_auto_20170704_0857'),
        ('actions', '0002_experiment'),
        ('data', '0002_auto_20170808_1504'),
        ('electrophysiology', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseBrainLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('ccf_ap', models.FloatField(help_text='Allen CCF antero-posterior coordinate (microns)')),
                ('ccf_dv', models.FloatField(help_text='Allen CCF dorso-ventral coordinate (microns)')),
                ('ccf_lr', models.FloatField(help_text='Allen CCF left-right coordinate (microns)')),
                ('allen_ontology', models.CharField(blank=True, help_text="Manually curated site location. Use  Allen's acronyms to represent the appropriate hierarchical level, e.g. SS, SSp, or SSp6a", max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChannelMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('channel_no', models.IntegerField(help_text='channel number in raw recording file (counting from 0)')),
                ('site_no', models.IntegerField(help_text='probe site number for that channel (NULL if channel not used or dead)', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProbeInsertion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('entry_point_rl', models.FloatField(blank=True, help_text='mediolateral position of probe entry point relative to midline (microns). Positive means right', null=True)),
                ('entry_point_ap', models.FloatField(blank=True, help_text='anteroposterior position of probe entry point relative to bregma (microns). Positive means anterior', null=True)),
                ('vertical_angle', models.FloatField(blank=True, help_text='vertical angle of probe (degrees). Zero means horizontal. Positive means pointing down.', null=True)),
                ('horizontal_angle', models.FloatField(blank=True, help_text='horizontal angle of probe (degrees), after vertical rotation. Zero means anterior. Positive means counterclockwise (i.e. left).', null=True)),
                ('axial_angle', models.FloatField(blank=True, help_text='axial angle of probe (degrees). Zero means that without vertical and horizontal rotations, the probe contacts would be pointint up. Positive means counterclockwise.', null=True)),
                ('distance_advanced', models.FloatField(blank=True, help_text='How far the probe was moved forward from its entry point. (microns).', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProbeModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('probe_model', models.CharField(help_text="manufacturer's part number e.g. A4x8-5mm-100-200-177", max_length=255)),
                ('description', models.CharField(blank=True, help_text="optional informal description e.g. 'Michigan 4x4 tetrode'; 'Neuropixels phase 2 option 1'", max_length=255, null=True)),
                ('probe_manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.Supplier')),
                ('site_positions', models.ForeignKey(blank=True, help_text='numerical array of size nSites x 2 giving locations of each contact site  in local coordinates. Probe tip is at the origin.', null=True, on_delete=django.db.models.deletion.CASCADE, to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='created_date',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='electrode_depth',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='extracellular_probe',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='highpass_data',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='id',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='json',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='lowpass_data',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='nominal_end_time',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='nominal_start_time',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='probe_location',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='raw_data',
        ),
        migrations.RemoveField(
            model_name='extracellularrecording',
            name='session',
        ),
        migrations.RemoveField(
            model_name='intracellularrecording',
            name='created_date',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='created_date',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='estimated_layer',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='id',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='json',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='location_center_of_mass',
        ),
        migrations.RemoveField(
            model_name='spikesortedunit',
            name='session',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='cluster_assignments',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='created_date',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='generating_software',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='id',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='json',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='mean_filtered_waveforms',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='mean_unfiltered_waveforms',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='provenance_directory',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='session',
        ),
        migrations.RemoveField(
            model_name='spikesorting',
            name='spike_times',
        ),
        migrations.AddField(
            model_name='extracellularrecording',
            name='gains',
            field=models.ForeignKey(blank=True, help_text='dataset containing gain of each channel  samples/microvolt', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_gains', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='extracellularrecording',
            name='lfp',
            field=models.ForeignKey(blank=True, help_text='lfp: low-pass filtered and downsampled', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_recording_lfp', to='data.TimeSeries'),
        ),
        migrations.AddField(
            model_name='extracellularrecording',
            name='timeseries_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.TimeSeries'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='intracellularrecording',
            name='created_datetime',
            field=models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True),
        ),
        migrations.AddField(
            model_name='intracellularrecording',
            name='experiment',
            field=models.ForeignKey(blank=True, help_text='The Experiment to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_intracellularrecording_session_related', to='actions.Experiment'),
        ),
        migrations.AddField(
            model_name='intracellularrecording',
            name='generating_software',
            field=models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255),
        ),
        migrations.AddField(
            model_name='intracellularrecording',
            name='provenance_directory',
            field=models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_intracellularrecording_provenance_related', to='data.Dataset'),
        ),
        migrations.AddField(
            model_name='spikesorting',
            name='cluster_data',
            field=models.ForeignKey(blank=True, help_text='DataCollection of files giving info on clusters: mean waveforms, qualities, etc.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_cluster_data', to='data.DataCollection'),
        ),
        migrations.AddField(
            model_name='spikesorting',
            name='eventseries_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.EventSeries'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='spikesorting',
            name='spikes',
            field=models.ForeignKey(default=None, help_text='EventSeries giving spike times plus clusters and any other info per spike', on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_spikes', to='data.EventSeries'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='extracellularrecording',
            name='filter_info',
            field=models.CharField(blank=True, help_text='Details of hardware corner frequencies, filter type, order.', max_length=255),
        ),
        migrations.AlterField(
            model_name='extracellularrecording',
            name='impedances',
            field=models.ForeignKey(blank=True, help_text='dataset containing measured impedance of each channel (ohms).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_impedances', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='spikesortedunit',
            name='cluster_number',
            field=models.IntegerField(),
        ),
        migrations.AlterField(
            model_name='spikesorting',
            name='extracellular_recording',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_recording', to='electrophysiology.ExtracellularRecording'),
        ),
        migrations.CreateModel(
            name='RecordingSite',
            fields=[
                ('basebrainlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='electrophysiology.BaseBrainLocation')),
                ('site_no', models.IntegerField(help_text='which site on the probe')),
            ],
            options={
                'abstract': False,
            },
            bases=('electrophysiology.basebrainlocation',),
        ),
        migrations.AddField(
            model_name='probeinsertion',
            name='probe_model',
            field=models.ForeignKey(blank=True, help_text='model of probe used', null=True, on_delete=django.db.models.deletion.CASCADE, to='electrophysiology.ProbeModel'),
        ),
        migrations.AddField(
            model_name='channelmapping',
            name='extracellular_recording',
            field=models.ForeignKey(help_text='id of extracellular recording', on_delete=django.db.models.deletion.CASCADE, to='electrophysiology.ExtracellularRecording'),
        ),
        migrations.AddField(
            model_name='channelmapping',
            name='probe_insertion',
            field=models.ForeignKey(help_text='which probe insertion was recorded on that channel. NULL if channel not used', null=True, on_delete=django.db.models.deletion.CASCADE, to='electrophysiology.ProbeInsertion'),
        ),
        migrations.AddField(
            model_name='spikesortedunit',
            name='basebrainlocation_ptr',
            field=models.OneToOneField(auto_created=True, default=None, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='electrophysiology.BaseBrainLocation'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='recordingsite',
            name='probe_insertion',
            field=models.ForeignKey(help_text='id of probe insertion', on_delete=django.db.models.deletion.CASCADE, to='electrophysiology.ProbeInsertion'),
        ),
    ]

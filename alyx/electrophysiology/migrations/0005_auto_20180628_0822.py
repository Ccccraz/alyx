# Generated by Django 2.0.6 on 2018-06-28 08:22

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('electrophysiology', '0004_auto_20180111_1634'),
    ]

    operations = [
        migrations.AlterField(
            model_name='extracellularrecording',
            name='amplifier',
            field=models.ForeignKey(blank=True, help_text='The amplifier used in this recording.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment.Amplifier'),
        ),
        migrations.AlterField(
            model_name='extracellularrecording',
            name='daq_description',
            field=models.ForeignKey(blank=True, help_text='The DAQ used.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment.DAQ'),
        ),
        migrations.AlterField(
            model_name='extracellularrecording',
            name='gains',
            field=models.ForeignKey(blank=True, help_text='dataset containing gain of each channel  microvolts/bit', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='extracellular_gains', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='extracellularrecording',
            name='impedances',
            field=models.ForeignKey(blank=True, help_text='dataset containing measured impedance of each channel (ohms).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='extracellular_impedances', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='extracellularrecording',
            name='lfp',
            field=models.ForeignKey(blank=True, help_text='lfp: low-pass filtered and downsampled', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='extracellular_recording_lfp', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='intracellularrecording',
            name='current_command',
            field=models.ForeignKey(blank=True, help_text='nA', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intracellular_recording_current_command', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='intracellularrecording',
            name='pipette_puller',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment.PipettePuller'),
        ),
        migrations.AlterField(
            model_name='intracellularrecording',
            name='recorded_current',
            field=models.ForeignKey(blank=True, help_text='nA. TODO: time series? flat file? sample rate?', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intracellular_recording_recorded_current', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='intracellularrecording',
            name='recorded_voltage',
            field=models.ForeignKey(blank=True, help_text='mV', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intracellular_recording_recorded_voltage', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='intracellularrecording',
            name='tip_location',
            field=models.ForeignKey(blank=True, help_text='Estimated location of probe tip', null=True, on_delete=django.db.models.deletion.SET_NULL, to='misc.BrainLocation'),
        ),
        migrations.AlterField(
            model_name='intracellularrecording',
            name='voltage_command',
            field=models.ForeignKey(blank=True, help_text='mV', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='intracellular_recording_voltage_command', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='probeinsertion',
            name='channel_mapping',
            field=models.ForeignKey(blank=True, help_text='numerical array of size nSites x 1 giving the row of the raw data file for each contact site. You will have one of these files per probe, including if you record multiple probes through the same amplifier. Sites that were not recorded should have NaN or -1.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='probe_insertion_channel_mapping', to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='probeinsertion',
            name='probe_model',
            field=models.ForeignKey(blank=True, help_text='model of probe used', null=True, on_delete=django.db.models.deletion.SET_NULL, to='electrophysiology.ProbeModel'),
        ),
        migrations.AlterField(
            model_name='probemodel',
            name='probe_manufacturer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='equipment.Supplier'),
        ),
        migrations.AlterField(
            model_name='probemodel',
            name='site_positions',
            field=models.ForeignKey(blank=True, help_text='numerical array of size nSites x 2 giving locations of each contact site  in local coordinates. Probe tip is at the origin.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='data.Dataset'),
        ),
        migrations.AlterField(
            model_name='spikesortedunit',
            name='spike_sorting',
            field=models.ForeignKey(blank=True, help_text='The spike sorting this unit came from', null=True, on_delete=django.db.models.deletion.SET_NULL, to='electrophysiology.SpikeSorting'),
        ),
    ]

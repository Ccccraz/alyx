# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-19 08:09
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('equipment', '0001_initial'),
        ('misc', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('data', '0001_initial'),
        ('actions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExtracellularRecording',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('filter_info', models.CharField(blank=True, help_text='Details of hardware corner frequencies, filter type, order. TODO: make this more structured?', max_length=255)),
                ('nominal_start_time', models.FloatField(blank=True, help_text='in seconds relative to session start.', null=True)),
                ('nominal_end_time', models.FloatField(blank=True, help_text='in seconds relative to session start', null=True)),
                ('recording_type', models.CharField(blank=True, choices=[('C', 'Chronic'), ('A', 'Acute')], help_text='Whether the recording is chronic or acute', max_length=1)),
                ('ground_electrode', models.CharField(blank=True, help_text="e.g. 'screw above cerebellum'", max_length=255)),
                ('reference_electrode', models.CharField(blank=True, help_text="e.g. 'shorted to ground'", max_length=255)),
                ('electrode_depth', models.FloatField(blank=True, help_text='estimated depth of electrode tip from brain surface. ', null=True)),
                ('amplifier', models.ForeignKey(blank=True, help_text='The amplifier used in this recording.', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.Amplifier')),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_extracellularrecording_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('daq_description', models.ForeignKey(blank=True, help_text='The DAQ used.', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.DAQ')),
                ('extracellular_probe', models.ForeignKey(blank=True, help_text='Which probe model was used.', null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.ExtracellularProbe')),
                ('highpass_data', models.ForeignKey(blank=True, help_text='Extracellular high-passed data', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_recording_hpf', to='data.TimeSeries')),
                ('impedances', models.ForeignKey(blank=True, help_text='binary array for measured impedance of each channel (ohms).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_impedances', to='data.Dataset')),
                ('lowpass_data', models.ForeignKey(blank=True, help_text='Extracellular low-passed data', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_recording_lpf', to='data.TimeSeries')),
                ('probe_location', models.ForeignKey(blank=True, help_text='from probe tip', null=True, on_delete=django.db.models.deletion.CASCADE, to='misc.CoordinateTransformation')),
                ('raw_data', models.ForeignKey(blank=True, help_text='Raw electrophysiology recording data in flat binary format', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extracellular_recording_raw', to='data.TimeSeries')),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_extracellularrecording_session_related', to='actions.Session')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IntracellularRecording',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('electrode_type', models.CharField(choices=[('W', 'Whole-cell'), ('S', 'Sharp')], max_length=1)),
                ('inner_diameter', models.FloatField(blank=True, help_text='mm – before pulling', null=True)),
                ('outer_diameter', models.FloatField(blank=True, help_text=' mm – before pulling', null=True)),
                ('electrode_solution', models.TextField(blank=True, help_text='Solution details.')),
                ('cp_fast', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('cp_slow', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('whole_cell_cap_comp', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('whole_cell_series_resistance', models.FloatField(blank=True, help_text='(Mohm)', null=True)),
                ('series_resistance_compensation_bandwidth', models.FloatField(blank=True, help_text='(kHz)', null=True)),
                ('series_resistance_compensation_correction', models.FloatField(blank=True, help_text='(%)', null=True)),
                ('series_resistance_compensation_prediction', models.FloatField(blank=True, help_text='(%)', null=True)),
                ('pipette_cap_comp', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('bridge_balance', models.FloatField(blank=True, help_text='(M Ohm)', null=True)),
                ('gain', models.FloatField(blank=True, help_text='(V/V) – for info only; not required to convert raw data to volts', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_intracellularrecording_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('current_command', models.ForeignKey(blank=True, help_text='nA', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intracellular_recording_current_command', to='data.Dataset')),
                ('pipette_puller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='equipment.PipettePuller')),
                ('recorded_current', models.ForeignKey(blank=True, help_text='nA. TODO: time series? flat file? sample rate?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intracellular_recording_recorded_current', to='data.Dataset')),
                ('recorded_voltage', models.ForeignKey(blank=True, help_text='mV', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intracellular_recording_recorded_voltage', to='data.Dataset')),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_intracellularrecording_session_related', to='actions.Session')),
                ('tip_location', models.ForeignKey(blank=True, help_text='Estimated location of probe tip', null=True, on_delete=django.db.models.deletion.CASCADE, to='misc.BrainLocation')),
                ('voltage_command', models.ForeignKey(blank=True, help_text='mV', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intracellular_recording_voltage_command', to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpikeSortedUnit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('cluster_number', models.IntegerField(blank=True, null=True)),
                ('channel_group', models.IntegerField(blank=True, help_text='which shank this unit came from (an integer not a link)', null=True)),
                ('trough_to_peak_width', models.FloatField(blank=True, help_text='ms, computed from unfiltered mean spike waveform.', null=True)),
                ('half_width', models.FloatField(blank=True, help_text='ms, half width of negative peak in unfiltered spike waveform.', null=True)),
                ('trough_to_peak_amplitude', models.FloatField(blank=True, help_text='µV, from filtered spike waveform.', null=True)),
                ('refractory_violation_rate', models.FloatField(blank=True, help_text='fraction of spikes occurring < 2ms. ', null=True)),
                ('isolation_distance', models.FloatField(blank=True, help_text='A measure of isolation quality', null=True)),
                ('l_ratio', models.FloatField(blank=True, help_text='A measure of isolation quality', null=True)),
                ('mean_firing_rate', models.FloatField(blank=True, help_text='spikes/s', null=True)),
                ('location_center_of_mass', models.FloatField(blank=True, help_text='3x1 in estimated stereotaxic coordinates.', null=True)),
                ('cluster_group', models.CharField(choices=[('0', 'Noise'), ('1', 'Multi-unit activity'), ('2', 'Single-unit activity')], help_text='Human decision on cluster group', max_length=1)),
                ('spike_width_class', models.CharField(choices=[('N', 'Narrow'), ('W', 'Wide')], help_text='Human decision on spike width', max_length=1)),
                ('optogenetic_response', models.CharField(blank=True, help_text="e.g. 'Short latency' (only if applicable)", max_length=255)),
                ('putative_cell_type', models.CharField(blank=True, help_text="e.g. 'Sst interneuron', 'PT cell'. ", max_length=255)),
                ('estimated_layer', models.CharField(blank=True, help_text="e.g. 'Layer 5b'. ", max_length=255)),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_spikesortedunit_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_spikesortedunit_session_related', to='actions.Session')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpikeSorting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation date.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'phy 0.8.3'", max_length=255)),
                ('cluster_assignments', models.ForeignKey(blank=True, help_text='cluster assignment of each spike', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_cluster_assignments', to='data.Dataset')),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of the data.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_spikesorting_created_by_related', to=settings.AUTH_USER_MODEL)),
                ('extracellular_recording', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='electrophysiology.ExtracellularRecording')),
                ('mean_filtered_waveforms', models.ForeignKey(blank=True, help_text='mean filtered waveforms of every spike on every channel', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_filtered_waveforms', to='data.Dataset')),
                ('mean_unfiltered_waveforms', models.ForeignKey(blank=True, help_text='mean unfiltered waveforms of every spike on every channel', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_unfiltered_waveforms', to='data.Dataset')),
                ('provenance_directory', models.ForeignKey(blank=True, help_text='link to directory containing intermediate results', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_provenance', to='data.Dataset')),
                ('session', models.ForeignKey(blank=True, help_text='The Session to which this data belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='electrophysiology_spikesorting_session_related', to='actions.Session')),
                ('spike_times', models.ForeignKey(blank=True, help_text='time of each spike relative to session start in universal seconds.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_spike_times', to='data.Dataset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='spikesortedunit',
            name='spike_sorting',
            field=models.ForeignKey(blank=True, help_text='The spike sorting this unit came from', null=True, on_delete=django.db.models.deletion.CASCADE, to='electrophysiology.SpikeSorting'),
        ),
    ]

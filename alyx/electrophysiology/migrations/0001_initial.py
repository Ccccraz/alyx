# Generated by Django 2.0.6 on 2018-07-09 16:44

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseBrainLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('ccf_ap', models.FloatField(help_text='Allen CCF antero-posterior coordinate (microns)')),
                ('ccf_dv', models.FloatField(help_text='Allen CCF dorso-ventral coordinate (microns)')),
                ('ccf_lr', models.FloatField(help_text='Allen CCF left-right coordinate (microns)')),
                ('allen_ontology', models.CharField(blank=True, help_text="Manually curated site location. Use  Allen's acronyms to represent the appropriate hierarchical level, e.g. SS, SSp, or SSp6a", max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtracellularRecording',
            fields=[
                ('dataset_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.Dataset')),
                ('filter_info', models.CharField(blank=True, help_text='Details of hardware corner frequencies, filter type, order.', max_length=255)),
                ('recording_type', models.CharField(blank=True, choices=[('C', 'Chronic'), ('A', 'Acute')], help_text='Whether the recording is chronic or acute', max_length=1)),
                ('ground_electrode', models.CharField(blank=True, help_text="e.g. 'screw above cerebellum'", max_length=255)),
                ('reference_electrode', models.CharField(blank=True, help_text="e.g. 'shorted to ground'", max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('data.dataset',),
        ),
        migrations.CreateModel(
            name='IntracellularRecording',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('created_datetime', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The creation datetime.', null=True)),
                ('generating_software', models.CharField(blank=True, help_text="e.g. 'ChoiceWorld 0.8.3'", max_length=255)),
                ('electrode_type', models.CharField(choices=[('W', 'Whole-cell'), ('S', 'Sharp')], max_length=1)),
                ('inner_diameter', models.FloatField(blank=True, help_text='mm – before pulling', null=True)),
                ('outer_diameter', models.FloatField(blank=True, help_text=' mm – before pulling', null=True)),
                ('electrode_solution', models.TextField(blank=True, help_text='Solution details.')),
                ('cp_fast', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('cp_slow', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('whole_cell_cap_comp', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('whole_cell_series_resistance', models.FloatField(blank=True, help_text='(Mohm)', null=True)),
                ('series_resistance_compensation_bandwidth', models.FloatField(blank=True, help_text='(kHz)', null=True)),
                ('series_resistance_compensation_correction', models.FloatField(blank=True, help_text='(%)', null=True)),
                ('series_resistance_compensation_prediction', models.FloatField(blank=True, help_text='(%)', null=True)),
                ('pipette_cap_comp', models.FloatField(blank=True, help_text='(pF)', null=True)),
                ('bridge_balance', models.FloatField(blank=True, help_text='(M Ohm)', null=True)),
                ('gain', models.FloatField(blank=True, help_text='(V/V) – for info only; not required to convert raw data to volts', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProbeInsertion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('entry_point_rl', models.FloatField(blank=True, help_text='mediolateral position of probe entry point relative to midline (microns). Positive means right', null=True)),
                ('entry_point_ap', models.FloatField(blank=True, help_text='anteroposterior position of probe entry point relative to bregma (microns). Positive means anterior', null=True)),
                ('vertical_angle', models.FloatField(blank=True, help_text='vertical angle of probe (degrees). Zero means horizontal. Positive means pointing down.', null=True)),
                ('horizontal_angle', models.FloatField(blank=True, help_text='horizontal angle of probe (degrees), after vertical rotation. Zero means anterior. Positive means counterclockwise (i.e. left).', null=True)),
                ('axial_angle', models.FloatField(blank=True, help_text='axial angle of probe (degrees). Zero means that without vertical and horizontal rotations, the probe contacts would be pointint up. Positive means counterclockwise.', null=True)),
                ('distance_advanced', models.FloatField(blank=True, help_text='How far the probe was moved forward from its entry point. (microns).', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProbeModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('json', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='Structured data, formatted in a user-defined way', null=True)),
                ('probe_model', models.CharField(help_text="manufacturer's part number e.g. A4x8-5mm-100-200-177", max_length=255)),
                ('description', models.CharField(blank=True, help_text="optional informal description e.g. 'Michigan 4x4 tetrode'; 'Neuropixels phase 2 option 1'", max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpikeSorting',
            fields=[
                ('dataset_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data.Dataset')),
                ('extracellular_recording', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_recording', to='electrophysiology.ExtracellularRecording')),
                ('probe_insertion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spike_sorting_probe', to='electrophysiology.ExtracellularRecording')),
            ],
            options={
                'abstract': False,
            },
            bases=('data.dataset',),
        ),
        migrations.CreateModel(
            name='RecordingSite',
            fields=[
                ('basebrainlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='electrophysiology.BaseBrainLocation')),
                ('site_no', models.IntegerField(help_text='which site on the probe')),
            ],
            options={
                'abstract': False,
            },
            bases=('electrophysiology.basebrainlocation',),
        ),
        migrations.CreateModel(
            name='SpikeSortedUnit',
            fields=[
                ('basebrainlocation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='electrophysiology.BaseBrainLocation')),
                ('cluster_number', models.IntegerField()),
                ('channel_group', models.IntegerField(blank=True, help_text='which shank this unit came from (an integer not a link)', null=True)),
                ('trough_to_peak_width', models.FloatField(blank=True, help_text='ms, computed from unfiltered mean spike waveform.', null=True)),
                ('half_width', models.FloatField(blank=True, help_text='ms, half width of negative peak in unfiltered spike waveform.', null=True)),
                ('trough_to_peak_amplitude', models.FloatField(blank=True, help_text='µV, from filtered spike waveform.', null=True)),
                ('refractory_violation_rate', models.FloatField(blank=True, help_text='fraction of spikes occurring < 2ms. ', null=True)),
                ('isolation_distance', models.FloatField(blank=True, help_text='A measure of isolation quality', null=True)),
                ('l_ratio', models.FloatField(blank=True, help_text='A measure of isolation quality', null=True)),
                ('mean_firing_rate', models.FloatField(blank=True, help_text='spikes/s', null=True)),
                ('cluster_group', models.CharField(choices=[('0', 'Noise'), ('1', 'Multi-unit activity'), ('2', 'Single-unit activity'), ('3', 'Unsorted')], help_text='Human decision on cluster group', max_length=1)),
                ('spike_width_class', models.CharField(choices=[('N', 'Narrow'), ('W', 'Wide')], help_text='Human decision on spike width', max_length=1)),
                ('optogenetic_response', models.CharField(blank=True, help_text="e.g. 'Short latency' (only if applicable)", max_length=255)),
                ('putative_cell_type', models.CharField(blank=True, help_text="e.g. 'Sst interneuron', 'PT cell'. ", max_length=255)),
            ],
            options={
                'abstract': False,
            },
            bases=('electrophysiology.basebrainlocation',),
        ),
    ]
